HTML 
1. What are web workers and why do we need them ?
Web worker helps to execute JavaScript file asynchronously.

A web worker is a script that runs in the background (i.e., in another thread) without the page needing to wait for it to complete. The user can continue to interact with the page while the web worker runs in the background. Workers utilize thread-like message passing to achieve parallelism.

2. What is local storage concept in HTML 5?
Many times we would like to store information about the user locally in the computer. For example let’s say user has half-filled a long form and suddenly the internet connection breaks off. So the user would like you to store this information locally and when the internet comes back.He would like to get that information and send it to the server for storage.

Modern browsers have storage called as “Local storage” in which you can store this information.

3. How can we add and remove data from local storage?

Data is added to local storage using “key” and “value”. Below sample code shows country data “India” added with key value “Key001”.
			localStorage.setItem("Key001","India");  
To retrieve data from local storage we need to use “getItem” providing the key name.

			var country = localStorage.getItem("Key001"); 
You can also store JavaScript object’s in the local storage using the below code.

			var country = {};
			country.name = "India";
			country.code = "I001";
			localStorage.setItem("I001", country);
			var country1 = localStorage.getItem("I001"); 
If you want to store in JSON format you can use “JSON.stringify” function as shown in the below code.

			localStorage.setItem("I001",JSON.stringify(country)); 

4. What is the lifetime of local storage?
Local storage does not have a life time it will stay until either the user clear it from the browser or you remove it using JavaScript code.


5. What is the difference between local storage and cookies?


	Client side / Server side.	
		Cookies
			Data accessible both at client side and server side. Cookie data is sent to the server side with every request.	
		Local Storage
			Data is accessible only at the local browser side. Server cannot access local storage until deliberately sent to the server via POST or GET.
		
Size
	Cookies
		4095 bytes per cookie.	
	Local Storage	
		5 MB per domain.
Expiration	
	Cookies
		Cookies have expiration attached to it. So after that expiration the cookie and the cookie data get’s deleted.	
	Local Storage
		There is no expiration data. Either the end user needs to delete it from the browser or programmatically using JavaScript we need to remove the same.

6. What is difference between session storage and local storage?
Local storage data persists forever but session storage is valid until the browser is open, as soon as the browser closes the session variable resets

7. What is WebSQL?
WebSQL is a structured relational database at the client browser side. It’s a local RDBMS inside the browser on which you can fire SQL queries.

8. Is WebSQL a part of HTML 5 specification?
No, many people label it as HTML 5 but it’s not part of HTML 5 specification. The specification is based around SQLite.

9. So how can we use WebSQL ?

The first step we need to do is open the database by using “OpenDatabase” function as shown below. The first argument is the name of the database, the next is the version, then a simple textual title and finally the size of the database.

		var db=openDatabase('dbCustomer','1.0','Customer app’, 2 * 1024 * 1024);
		
To execute SQL we then need to use “transaction” function and call “executeSql” function to fire SQL.
		db.transaction(function (tx) 
		{
		tx.executeSql('CREATE TABLE IF NOT EXISTS tblCust(id unique, customername)');
		tx.executeSql('INSERT INTO tblcust (id, customername) VALUES(1, "shiv")');
		tx.executeSql('INSERT INTO tblcust (id, customername) VALUES (2, "raju")');
		} 
In case you are firing “select” query you will get data is “results” collection which we can loop and display in the HTML UI.

		db.transaction(function (tx) 
		{
		  tx.executeSql('SELECT * FROM tblcust', [], function (tx, results) {
		   for (i = 0; i < len; i++)
		{
			 msg = "<p><b>" + results.rows.item(i).log + "</b></p>";
			 document.querySelector('#customer).innerHTML +=  msg;
		}
		 }, null);
		});

9. So how do we implement application cache in HTML 5 ?
The first thing in we need to specify is the “manifest” file. “manifest” file helps you to define how your caching should work. Below is the structure of the manifest file :-

CACHE MANIFEST
# version 1.0
CACHE :
Login.aspx 

All manifest file starts with CACHE MANIFEST statement.
#( hash tag) helps to provide the version of the cache file.
CACHE command specifies which files needs to be cached.
The content type of the manifest file should be “text/cache-manifest”.

One the cache manifest file is created the next thing is to provide the link of the manifest file in the HTML page as shown below.

<html manifest="cache.aspx"> 

When the above file runs first time it gets added in the browser application cache and in case server goes down the page is served from the application cache.

10. What is fallback in Application cache?

<a name="WhatisfallbackinApplicati>FALLBACK:
/home/ /homeoffline.html </a></pre>

<h2><a name=" whatisfallbackinapplicati=""></a>


11. What is datalist in HTML 5?
<input list="Country">
<datalist id="Country">
<option value="India">
<option value="Italy">
<option value="Iran">
<option value="Israel">
<option value="Indonesia">
</datalist>

12. What are the different new form element types in HTML 5?
There are 10 important new form elements introduced in HTML 5:-

Color.
Date
Datetime-local
Email
Time
Url
Range
Telephone
Number
Search
Let’s understand these elements step by step.

13. Can you explain CSS box model?
CSS box model is a rectangular space around a HTML element which defines border, padding and margin.

Border: - This defines the maximum area in which the element will be contained. We can make the border visible, invisible, define height and width etc.

Padding: - This defines the spacing between border and element.

Margin: - This defines the spacing between border and any neighboring elements.

14. Discuss the differences between an HTML specification and a browser’s implementation thereof.

HTML specifications such as HTML5 define a set of rules that a document must adhere to in order to be “valid” according to that specification. In addition, a specification provides instructions on how a browser must interpret and render such a document.

A browser is said to “support” a specification if it handles valid documents according to the rules of the specification. As of yet, no browser supports all aspects of the HTML5 specification (although all of the major browser support most of it), and as a result, it is necessary for the developer to confirm whether the aspect they are making use of will be supported by all of the browsers on which they hope to display their content. This is why cross-browser support continues to be a headache for developers, despite the improved specificiations.

In addition, while HTML5 defines some rules to follow for an invalid HTML5 document (i.e., one that contains syntactical errors), invalid documents may contain anything, and it is impossible for the specification to handle all possibilities comprehensively. Thus, many decisions about how to handle malformed documents are left up to the browser.



